name: CI

on:
  pull_request: ~
  push:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    name: Linting & Static Analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - uses: "ramsey/composer-install@v3"

      - name: Linting PHP
        run: make lint-php

      - name: PHPCS Code Style Check
        run: make check-cs

      - name: PHPStan Static Analyses
        run: make static-analysis

  tests:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [ '8.3', '8.4' ]
        test-group: [ 'small', 'large', 'medium', 'ungrouped' ]
        database: [ 'sqlite', 'pgsql' ]
    name: Tests PHP ${{ matrix.php }} - ${{ matrix.test-group }} - ${{ matrix.database }}

    services:
      postgres:
          image: pgvector/pgvector:pg16
          env:
              POSTGRES_USER: app
              POSTGRES_PASSWORD: app
              POSTGRES_DB: chronicle-keeper
          ports:
              - 5432:5432
          options: >-
              --health-cmd pg_isready
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}

      - uses: "ramsey/composer-install@v3"

      - name: Setup Database Config
        run: |
            if [ "${{ matrix.database }}" == "pgsql" ]; then
                echo "DATABASE_TYPE=PgSql" >> .env.test
                echo "DATABASE_CONNECTION=pgsql:host=localhost;port=5432;dbname=chronicle-keeper;user=app;password=app" >> .env.test
            else
                echo "DATABASE_TYPE=sqlite" >> .env.test
                echo "DATABASE_CONNECTION=database_test.sqlite" >> .env.test
            fi

      - name: PHPUnit
        run: |
          if [ "${{ matrix.test-group }}" == "ungrouped" ]; then
              PHP_INI_SCAN_DIR=:config/sqlite/ php vendor/bin/phpunit --exclude-group small --exclude-group large --exclude-group medium
          else
              PHP_INI_SCAN_DIR=:config/sqlite/ php vendor/bin/phpunit --group ${{ matrix.test-group }}
          fi

  coverage:
    needs: tests
    runs-on: ubuntu-latest
    name: Coverage Report
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - uses: "ramsey/composer-install@v3"

      - name: Generate Coverage Report
        run: make coverage

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
